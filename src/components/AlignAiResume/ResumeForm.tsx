
"use client";

import React, { useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import type { GenerateResumeInput } from "@/ai/flows/generate-resume";
import { generateResume } from "@/ai/flows/generate-resume";
import { Button } from "@/components/ui/button";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { useToast } from "@/hooks/use-toast";
import { Loader2 } from "lucide-react";
import { PersonalDetailsForm } from "./ResumeFormSections/PersonalDetailsForm";
import { WorkExperienceForm } from "./ResumeFormSections/WorkExperienceForm";
import { ProjectsForm } from "./ResumeFormSections/ProjectsForm";
import { EducationForm } from "./ResumeFormSections/EducationForm";
import { VolunteerExperienceForm } from "./ResumeFormSections/VolunteerExperienceForm";
import { SkillsForm } from "./ResumeFormSections/SkillsForm";
import { HobbiesForm } from "./ResumeFormSections/HobbiesForm";
import { GenerateResumeFormSchema, initialResumeData, type GenerateResumeFormValues } from "@/lib/zod-schemas";


interface ResumeFormProps {
  onResumeGenerated: (resumeText: string) => void;
  setIsLoading: (isLoading: boolean) => void;
  isLoading: boolean;
  onFormUpdate: (data: GenerateResumeFormValues) => void; // For live preview
}

export function ResumeForm({ onResumeGenerated, setIsLoading, isLoading, onFormUpdate }: ResumeFormProps) {
  const { toast } = useToast();
  const form = useForm<GenerateResumeFormValues>({
    resolver: zodResolver(GenerateResumeFormSchema),
    defaultValues: initialResumeData,
    mode: "onChange", 
  });

  const watchedValues = form.watch();
  // Create a stable string representation of watchedValues for useEffect dependency
  const watchedValuesString = JSON.stringify(watchedValues);

  useEffect(() => {
    // Pass the actual object, not the stringified version
    onFormUpdate(watchedValues);
  }, [watchedValuesString, onFormUpdate]); // Depend on the stringified version and onFormUpdate

  const onSubmit = async (values: GenerateResumeFormValues) => {
    setIsLoading(true);
    try {
      const apiValues: GenerateResumeInput = {
        ...values,
        volunteerExperience: values.volunteerExperience && values.volunteerExperience.length > 0 && values.volunteerExperience.some(v => v.organization || v.role || v.startDate || v.endDate || v.description)
          ? values.volunteerExperience.filter(v => v.organization || v.role || v.startDate || v.endDate || v.description)
          : undefined,
        hobbies: values.hobbies && values.hobbies.length > 0 && values.hobbies.some(h => h && h.trim() !== "")
          ? values.hobbies.filter(h => h && h.trim() !== "")
          : undefined,
      };
      const result = await generateResume(apiValues);
      onResumeGenerated(result);
      toast({
        title: "Resume Generated!",
        description: "Your resume has been generated by AI.",
      });
    } catch (error) {
      console.error("Error generating resume:", error);
      toast({
        title: "Error",
        description: "Failed to generate resume. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };
  
  const formSections = [
    { title: "Personal Details", content: <PersonalDetailsForm form={form} /> },
    { title: "Job Profile (Optional - Appears as Resume Heading)", content: (
      <FormField
        control={form.control}
        name="jobProfile"
        render={({ field }) => (
          <FormItem>
            <FormLabel>Job Profile / Resume Heading</FormLabel>
            <FormControl>
              <Input placeholder="e.g., Senior Full Stack Developer" {...field} />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />
    )},
    { title: "Skills", content: <SkillsForm form={form} /> },
    { title: "Work Experience", content: <WorkExperienceForm form={form} /> },
    { title: "Projects", content: <ProjectsForm form={form} /> },
    { title: "Education", content: <EducationForm form={form} /> },
    { title: "Volunteer Experience (Optional)", content: <VolunteerExperienceForm form={form} /> },
    { title: "Hobbies (Optional)", content: <HobbiesForm form={form} /> },
  ];

  return (
    <Card className="shadow-lg">
      <CardHeader>
        <CardTitle className="text-xl font-headline">Build Your Resume</CardTitle>
      </CardHeader>
      <CardContent>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
            <Accordion type="multiple" defaultValue={["Personal Details", "Skills", "Work Experience"]} className="w-full">
              {formSections.map((section, index) => (
                <AccordionItem key={index} value={section.title}>
                  <AccordionTrigger className="text-lg font-semibold hover:no-underline">
                    {section.title}
                  </AccordionTrigger>
                  <AccordionContent className="pt-4">
                    {section.content}
                  </AccordionContent>
                </AccordionItem>
              ))}
            </Accordion>

            <Button type="submit" className="w-full" disabled={isLoading}>
              {isLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
              Generate via AI
            </Button>
          </form>
        </Form>
      </CardContent>
    </Card>
  );
}
